declare const fail: (message: string) => void;
declare const warn: (message: string) => void;
declare const markdown: (message: string) => void;

import findAllLicenses from "../auditor/licenseChecker";
import { noLicenses } from "../auditor/messages.js";
import parseLicensesFactory from "../auditor/parseLicenses.js";
import { License } from "../models/license.js";
import getConfiguration from "../util/configuration.js";
import { LicenseOutputter } from "../util/outputters";
import { getCurrentVersionString } from "../util/root-project.js";

const repositoryUrl = "https://github.com/jpfulton/node-license-auditor-cli";
const version = getCurrentVersionString();

export interface IPluginConfig {
  failOnBlacklistedLicense: boolean;
  projectPath: string;
  showMarkdownSummary: boolean;
  showMarkdownDetails: boolean;
}

export const licenseAuditor = async (
  config: Partial<IPluginConfig> = {}
): Promise<void> => {
  const {
    failOnBlacklistedLicense = false,
    projectPath = ".",
    showMarkdownSummary = true,
    showMarkdownDetails = true,
  } = config;

  try {
    const auditorConfig = await getConfiguration();
    const licenses = await findAllLicenses(projectPath);

    if (!licenses || licenses.length <= 0) {
      return warn(noLicenses);
    }

    const parse = parseLicensesFactory(
      auditorConfig.whiteList,
      auditorConfig.blackList,
      emptyOutputter,
      warnOutputter,
      errorOutputter
    );

    const result = parse(licenses);
    const {
      uniqueCount,
      whitelistedCount,
      warnCount,
      blacklistedCount,
      outputs,
    } = result;

    if (showMarkdownSummary) {
      markdown("## Dependency License Audit Summary");

      markdown(
        `> :information_source: This summary is generated by \`node-license-auditor\` plugin for DangerJS. <br />
> :information_source: Version: ${version} <br />
> :information_source: For more information, please visit [node-license-auditor](${repositoryUrl}) <br />`
      );

      metadataOutputter(
        uniqueCount,
        whitelistedCount,
        warnCount,
        blacklistedCount
      );

      if (showMarkdownDetails) {
        detailsOutputter(outputs);
      }
    }

    if (warnCount > 0) {
      warn(
        `Found ${warnCount} licenses that we neither whitelisted nor blacklisted by the configuration.`
      );
    }

    if (failOnBlacklistedLicense && blacklistedCount > 0) {
      fail(`Found ${blacklistedCount} blacklisted licenses.`);
    } else if (blacklistedCount > 0) {
      warn(`Found ${blacklistedCount} blacklisted licenses.`);
    }
  } catch (err) {
    fail(
      `[node-license-auditor] Failed to audit licenses with error: ${
        (err as Error).message
      }`
    );
  }
};

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const emptyOutputter: LicenseOutputter = (_license: License) => {
  return "";
};

const warnOutputter: LicenseOutputter = (license: License) => {
  return markdownOutputter(":yellow_circle:", license);
};

const errorOutputter: LicenseOutputter = (license: License) => {
  return markdownOutputter(":red_circle:", license);
};

const markdownOutputter = (icon: string, license: License) => {
  const { name, version, licenses } = license;
  const licenseString = Array.isArray(licenses)
    ? licenses.join(", ")
    : licenses;

  return `| ${icon} | ${name} | ${version} | ${licenseString} |`;
};

export const detailsOutputter = (outputs: string[]) => {
  markdown(`### License Details`);
  markdown(`| Status | Package Name | Version | License |
|---|---|---|---|
${outputs.join("\n")}`);
};

const metadataOutputter = (
  uniqueCount: number,
  whitelistedCount: number,
  warnCount: number,
  blacklistedCount: number
) => {
  const message = `| :hash: Unique Licenses | :green_circle: Whitelisted Licenses | :yellow_circle: Warned Licenses | :red_circle: Blacklisted Licenses |
|---|---|---|---|
| ${uniqueCount} | ${whitelistedCount} | ${warnCount} | ${blacklistedCount} |`;

  markdown(message);
};

export default licenseAuditor;
